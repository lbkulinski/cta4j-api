name: cta4j API - Build & Deploy to AWS
on:
  push:
    branches: [ "main" ]
concurrency:
  group: deploy-main
  cancel-in-progress: true
env:
  APP_AWS_SECRETS_MANAGER_SECRET_ID: ${{ vars.APP_AWS_SECRETS_MANAGER_SECRET_ID }}
  APP_AWS_DYNAMODB_TABLES_ROUTES: ${{ vars.APP_AWS_DYNAMODB_TABLES_ROUTES }}
  APP_AWS_DYNAMODB_TABLES_ROUTE_DIRECTIONS: ${{ vars.APP_AWS_DYNAMODB_TABLES_ROUTE_DIRECTIONS }}
  APP_AWS_DYNAMODB_TABLES_ROUTE_STOPS: ${{ vars.APP_AWS_DYNAMODB_TABLES_ROUTE_STOPS }}
  APP_AWS_DYNAMODB_TABLES_STATIONS: ${{ vars.APP_AWS_DYNAMODB_TABLES_STATIONS }}
  APP_CTA_API_TRAINS_BASE_URL: ${{ vars.APP_CTA_API_TRAINS_BASE_URL }}
  APP_CTA_API_BUSES_BASE_URL: ${{ vars.APP_CTA_API_BUSES_BASE_URL }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
permissions:
  id-token: write
  contents: read
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '25'
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: arn:aws:iam::038462756529:role/cta4j-api-github-actions-role
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
